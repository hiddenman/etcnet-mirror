/etc/net version 0.8.0
http://etcnet.org/


Contents:
1. General information
5. Configuration profiles
 5.1 Static profiles
 5.1 Dynamic profiles
10. Firewall support
Appendix A. Copyright and license


1. GENERAL INFORMATION

/etc/net (etcnet) performs network configuration in Linux. The project's
goal is to make network management in Linux more convenient and
reflecting modern kernel and tools features.

Supported interface types:
+ethernet (eth)
+WiFi
+IP tunnels (iptun)
+IPSec static tunnels (ipsectun)
+VLANs (vlan)
+PLIP (plip)
+bonding (bond)
+bridge
+traffic equalizers (teql)
+/-dummy
+DVB: Pent@NET, Pent@VALUE, SkyStar-2
+usbnet
+PPP (see below for PPtP, PPPoE)

Supported protocols:
IPv4 (static, DHCP, IPv4LL)
IPv6 (static)
IPX

5. CONFIGURATION PROFILES
5.1 Static profiles
A profile is a configuration superset. E.g. when a notebook boots up in
several different networks, it's desirable to select current configuration
by just one parameter. Current profile name can be set via:
 1. environment variable NETPROFILE (not a good idea I guess)
 2. file /etc/net/profile (file should contain just one word, e.g. "office" w/o quotes)
 3. kernel boot parameter "netprof", e.g. "LILO: linux netprof=home"
Specifying a profile does nothing by default. But if etcnet scripts know the
current profile name (e.g. "home") and look for a configuration file (e.g. "options"
and "options#home" exists, then "options#home" will be used instead of "options".
The same for ipv4address, ipv4route, ipv4rule, ipv6address, iplink and so on).

Now if you want to boot the same host in two different networks, you will most
probably have to create additional ipv4address#yourprofilename for another address
and ipv4route#yourprofilename for another default route. Same for resolv.conf,
I guess.

Next example: booting two different hosts from the same HDD (root fs). The same as
previous, but additional options#yourprofilename and iftab#yourprofilename for the
different network card.

To switch between configurations without editing /etc/net/profile one can use:
# service etcnet startwith office
# service etcnet restartwith home

5.2 Dynamic profiles
If 'selectprofile' executable script exists in iface directory, it will be run with a
single argument, which defines current stage of (de)configuration sequence. If you
want to override current profile name during runtime, you should perform required
actions in this script and print profile name to stdout. Since this script will be run
several times and runtime detection can take certain time to complete, it is advised
that the script should perform actions only at certain stages. 'selectprofile' will
always get calling script name as the first parameter, so you can skip trying to
detect wireless AP before the kernel module is even loaded, for example. See
/etc/net/ifaces/default/selectprofile for sample implementation.
As for /etc/net-0.5.3 init_netprofile is called only from {ifup,ifdown}.*,
{setup,shutdown}-.* and network.init scripts.

10. Firewall support
10.1. Iptables configs structure

/etc/net/ifaces/default/options: You'd set CONFIG_FW to "yes" for firewall support
/etc/net/ifaces/default/fw/options: Some options for firewall (type, syntax,
default policy for chains)

/etc/net/ifaces/<IFACE>/fw/iptables:
modules: file with list of modules to load when firewall starting
syntax: file with syntax of firewall rules if you've enabled
IPTABLES_HUMAN_SYNTAX

filter: directory with chains for table filter
   |
   --INPUT: File with rules for chain INPUT
   |
   --FORWARD: File with rules for chain FORWARD
   |
   --OUTPUT: File with rules for chain OUTPUT
  
nat: directory with chains for table nat
   |
   --PREROUTING: File with rules for chain PREROUTING
   |
   --POSTROUTING: File with rules for chain POSTROUTING
   |
   --OUTPUT: File with rules for chain OUTPUT
   
mangle: directory with chains for table mangle
   |
   --PREROUTING: File with rules for chain PREROUTING
   |
   --INPUT: File with rules for chain INPUT
   |
   --FORWARD: File with rules for chain FORWARD
   |
   --OUTPUT: File with rules for chain OUTPUT
   |
   --POSTROUTING: File with rules for chain POSTROUTING

You can create your own chain by adding new file to directory. Chain name is
case-sensitive!

Each directory may contains special file "loadorder". In this case tables and
chains processed in order from this file (ony by one)

10.2. Rules syntax
Supported  two type of syntax:
	- raw iptables syntax
	- new "human" syntax a la ipfw
	
If you've enabled IPTABLES_HUMAN_SYNTAX in fw/options, then you can use rules
like ipfw (see examples and syntax file)

In both types of syntax you'd not to include chain or table name to rule.

You can use environment variables and even run one-string commands by using $(cmd).
If there is now output from commnd rule will not be added (this can be used
for including some configs or files with functions).

System environment variable $NAME contains current interface name.

Comments in all files must begins with #

10.3. How it works

When you start service network:
interface "default":
- If CONFIG_FW is yes then go step 2 otherwise go out :)
- Apply chains policy before any interface start and before forwarding is enabled
  sysctl
- Load all modules from first to last from "module" file if any
- Create all user-defined chains in all tables if any
- From each chain in each table read rules one by one, parse it (if IPTABLES_HUMAN_SYNTAX)
  and pass it to iptables
each other interface:
- Do same work except chains policy

When you stop service network:
 Do same work in case of start with some diffrences:
- All steps goes in reverse order
- If interface is not "default" then rules deleted one by one from last to first
  otherwise chain just flushed
- Modules unloads from last to first
- Reset chains policy to ACCEPT

You don't need to have all configs for all interfaces. Default rules (in
virtual "default" interface directory) are enough to setup firewall.
But you can have and start some special firewall rules for given interface
or just for clean kernel rules tables (i.e. if you have down some interface
there is no reason to have hundreds of rules for it)

There is special script /sbin/fw which can manage firewall without restarting
interface. Just run: /sbin/fw default stop and your firewall will be stopped :)

 Bugs and limitations
1. Syntax file is not completed. Some rules (especially with prefix "not") will
not work (you can patch syntax file)
2. Many other limitations :)


Appendix A. COPYRIGHT AND LICENSE

Copyright (c) 2004-2005 Denis Ovsienko <info/@/etcnet.org>
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
