#!/bin/bash
#
# etcnet
# chkconfig: 2345 10 90
# description: etcnet is network configuration software

# Do not load RH compatibility interface.
WITHOUT_RC_COMPAT=1
# Source function library.
SCRIPTDIR=/etc/net/scripts
. $SCRIPTDIR/functions
SourceIfNotEmpty /etc/sysconfig/network
export IFACEDIR SCRIPTDIR PROFILE
LOCKFILE=/var/lock/subsys/network

start_group()
{
	local GROUP_ID=${1:?start_group: missing 1st arg}
	local GROUP_SIZE=`echo "${GROUP[$GROUP_ID]}" | wc -w`
	echo "Starting group $GROUP_ID/`group2name $GROUP_ID` ($GROUP_SIZE interfaces)"
	[ $GROUP_ID -eq 2 ] && {
		# hosted physical
		start_vlantab
	}
	for i in `seq 0 $((GROUP_SIZE-1))`; do
		IFNAME=`echo ${GROUP[$GROUP_ID]} | awk "{print \\$$((i+1))}"`
		print_message -n "Starting $IFNAME: "
		if $SCRIPTDIR/ifup $IFNAME boot; then
			print_message "OK"
		else
			print_message ""
		fi
	done
}

# clone
stop_group()
{
	local GROUP_ID=${1:?start_group: missing 1st arg}
	local GROUP_SIZE=`echo "${GROUP[$GROUP_ID]}" | wc -w`
	echo "Stopping group $GROUP_ID/`group2name $GROUP_ID` ($GROUP_SIZE interfaces)"
	[ $GROUP_ID -eq 2 ] && {
		# hosted physical
		stop_vlantab
	}
	for i in `seq 0 $((GROUP_SIZE-1))`; do
		IFNAME=`echo ${GROUP[$GROUP_ID]} | awk "{print \\$$((i+1))}"`
		print_message -n "Stopping $IFNAME: "
		if $SCRIPTDIR/ifdown $IFNAME; then
			print_message "OK"
		else
			print_message ""
		fi
	done
}

start()
{
	$SYSCTL -p `profiled_filename /etc/net/sysctl.conf`
	declare -a GROUP
	# 1. fill in the groups
	GROUPCOUNT=0
	print_message -n "Computing interface groups: "
	export MYIFACEDIR NAME
	for IFACEPATH in $IFACEDIR/*; do
		NAME=${IFACEPATH//*\//}
		MYIFACEDIR=$IFACEDIR/$NAME
		[ "$NAME" = "default" -o "$NAME" = "CVS" ] && continue
		unset TYPE DISABLED
		pickup_options
		is_yes "$DISABLED" && continue
		GROUP_ID=`type2group $TYPE`
		[ -z "$GROUP_ID" ] && {
			print_error "unknown interface group for iface '$NAME' of type '$TYPE'"
			continue
		}
		GROUP[$GROUP_ID]="${GROUP[$GROUP_ID]} $NAME"
		GROUPCOUNT=$((GROUPCOUNT + 1))
		print_message -n '.'
	done
	print_message " $GROUPCOUNT interfaces found"
	# 2. process each group
	for i in 0 1 2 3 4; do
		[ -n "$GROUP[$i]" ] && start_group $i
	done
	touch "$LOCKFILE"
}

# clone
stop()
{
	declare -a GROUP
	# 1. fill in the groups
	GROUPCOUNT=0
	print_message -n "Computing interface groups: "
	export MYIFACEDIR NAME
	for IFACEPATH in $IFACEDIR/*; do
		NAME=${IFACEPATH//*\//}
		MYIFACEDIR=$IFACEDIR/$NAME
		[ "$NAME" = "default" -o "$NAME" = "CVS" ] && continue
		unset TYPE DISABLED
		pickup_options
		is_yes "$DISABLED" && continue
		GROUP_ID=`type2group $TYPE`
		[ -z "$GROUP_ID" ] && {
			print_error "unknown interface group for iface '$NAME' of type '$TYPE'"
			continue
		}
		GROUP[$GROUP_ID]="${GROUP[$GROUP_ID]} $NAME"
		GROUPCOUNT=$((GROUPCOUNT + 1))
		print_message -n '.'
	done
	print_message " $GROUPCOUNT interfaces found"
	# 2. process each group
	for i in 4 3 2 1 0; do
		[ -n "$GROUP[$i]" ] && stop_group $i
	done
	rm -f "$LOCKFILE"
}

# first-look ifaces checker
check()
{
	print_message "Checking interfaces in $IFACEDIR:"
	export MYIFACEDIR NAME
	for IFACEPATH in $IFACEDIR/*; do
		NAME=${IFACEPATH//*\//}
		MYIFACEDIR=$IFACEDIR/$NAME
		# skip default
		[ "$NAME" = "default" -o "$NAME" = "CVS" ] && continue
		unset TYPE
		pickup_options
		GROUP_ID=`type2group $TYPE`
		GROUP=`group2name $GROUP_ID`
		print_message -n "$NAME: ${TYPE:-unknown type}/${GROUP:-unknown group}"
		if [ -z "$GROUP" ];then
			print_message ' ERROR: unsupported interface!'
			continue
		fi
		print_message ' PASSED'
		# examine all files
		for IFACEFILE in $MYIFACEDIR/*; do
			TESTFILE=${IFACEFILE//*\//}
			[ "$TESTFILE" = "CVS" ] && continue
			print_message -n "$NAME/$TESTFILE:"
			# strip optional profile suffix
			case ${TESTFILE//.*/} in
				# standalone optional files
				options|iplink|ipv4address|ipv6address|sysctl.conf)
					print_message -n ' seems OK'
					;;
				ipv4route|ipv4rule)
					if [ -s $MYIFACEDIR/ipv4address ]; then
						print_message -n ' seems OK'
					else
						print_message -n ' WARNING: missing ipv4address?'
					fi
					;;
				ipv6route)
					if [ -s $MYIFACEDIR/ipv6address ]; then
						print_message -n ' seems OK'
					else
						print_message -n ' missing ipv6address?'
					fi
					;;
				pppoptions|pppinit|pppconnect|pppdisconnect)
					if [ "$TYPE" = "ppp" ]; then
						print_message -n ' seems OK'
					else
						print_message -n ' WARNING: useless file!'
					fi
					;;
				*)
					print_message -n ' ???'
					;;
			esac
			print_message ''
		done
	done
}
usage()
{
	msg_usage "${0##*/} {start|startwith|stop|stopwith|restart|reload|restartwith|switchto <new profile name>}"
	exit 1
}

is_yes "$NETWORKING" || return 0
# See how we were called.
case "$1" in
	start)
		[ $# -ne 1 ] && usage
		init_profile
		start
		;;
	startwith)
		[ $# -ne 2 ] && usage
		init_profile $2
		start
		;;
	stop)
		[ $# -ne 1 ] && usage
		init_profile
		stop
		;;
	stopwith)
		[ $# -ne 2 ] && usage
		init_profile $2
		stop
		;;
	reload|restart)
		[ $# -ne 1 ] && usage
		init_profile
		stop
		start
		;;
	restartwith)
		[ $# -ne 2 ] && usage
		init_profile $2
		stop
		init_profile $2
		start
		;;
	switchto)
		[ $# -ne 2 ] && usage
		init_profile
		stop
		init_profile $2
		start
		;;
	check)
		init_profile
		check
		;;
	*)
		usage
esac

exit 0
