#!/bin/bash

# get VLAN iface name by host iface and VLAN ID
get_vlan_ifname()
{
	local HOSTIFACE=${1:?missing 1st arg to $FUNCNAME}
	local VID=${2:?missing 2nd arg to $FUNCNAME}
	grep "|\ *$VID\ *|\ *$HOSTIFACE" /proc/net/vlan/config | $CUTSP -f1
}

# create VLAN iface <parent iface> <VLAN ID> [name]
setup_vlan_iface()
{
	local HOST_IFACE=${1:?missing 1st arg to $FUNCNAME}
	local VID=${2:?missing 2nd arg to $FUNCNAME}
	local NAME=$3
	local ADDRESS=$4
	[ -x "${VCONFIG:=$DEFAULT_VCONFIG}" ] || {
		print_error "$VCONFIG does not exist or is not executable. Try installing vlan-utils24 RPM."
		return 1
	}
	$VCONFIG set_name_type ${NAMETYPE:-$DEFAULT_VLAN_NAMETYPE} >/dev/null 2>&1 || return 1
	$VCONFIG add $HOST_IFACE $VID >/dev/null 2>&1 || return 1
	local REALNAME=`get_vlan_ifname $HOST_IFACE $VID`
	if [ -z "$NAME" -o "$NAME" = "AUTO" ]; then
		NAME=$REALNAME
	else
		$IP link set $REALNAME name $NAME
	fi
	[ -n "$ADDRESS" ] && $IP address add $ADDRESS dev $NAME
	$IP link set dev $NAME up
	return 0
}

shutdown_vlan_iface()
{
	local VCONFIG
	[ -x "${VCONFIG:=$DEFAULT_VCONFIG}" ] || {
		print_error "$VCONFIG does not exist or is not executable. Try installing vlan-utils24 RPM."
		return 1
	}
	local HOST_IFACE=${1:?missing 1st arg to $FUNCNAME}
	local VID=${2:?missing 2nd arg to $FUNCNAME}
	local NAME=`get_vlan_ifname $HOST_IFACE $VID`
	$IP address flush dev $NAME >/dev/null 2>&1
	$VCONFIG rem $NAME >/dev/null 2>&1 || return 1
	return 0
}

start_vlantab()
{
	local PROFILED_VLANTAB=`profiled_filename $VLANTAB`
	print_message -n "Processing $PROFILED_VLANTAB: "
	[ -s $PROFILED_VLANTAB ] || {
		print_message empty.
		return
	}
	local HOST_IFACE CHILD_VID CHILD_NAME PROBED_8021Q=no
	SourceIfNotEmpty `profiled_filename $IFACEDIR/default/options-vlan`
	$DENOISE $PROFILED_VLANTAB | while read HOST_IFACE CHILD_VID CHILD_NAME; do
		if [ "$PROBED_8021Q" = "no" ]; then
			PROBED_8021Q=yes
			$MODPROBE 8021q || {
				print_error "error inserting 8021q kernel module"
				return 1
			}
		fi
		if iface_is_up "$HOST_IFACE"; then
			if setup_vlan_iface $HOST_IFACE $CHILD_VID $CHILD_NAME; then
				print_progress
			else
				print_nack
			fi
		fi
	done
	# We can't count ifaces right in the while cycle due to pipe causing new process
	print_message "`$DENOISE -c $PROFILED_VLANTAB` lines processed."
	return 0
}

stop_vlantab()
{
	local PROFILED_VLANTAB=`profiled_filename $VLANTAB`
	print_message -n "Processing $PROFILED_VLANTAB: "
	[ -s $PROFILED_VLANTAB ] || {
		print_message empty.
		return 0
	}
	local HOST_IFACE CHILD_VID CHILD_NAME
	SourceIfNotEmpty `profiled_filename $IFACEDIR/default/options-vlan`
	$DENOISE $PROFILED_VLANTAB | while read HOST_IFACE CHILD_VID CHILD_NAME; do
		if shutdown_vlan_iface $HOST_IFACE $CHILD_VID $CHILD_NAME; then
			print_progress
		else
			print_nack
		fi
	done
	# See start_vlantab().
	print_message "`$DENOISE -c $PROFILED_VLANTAB` lines processed."
	return 0
}
