#!/bin/bash

# This script is a hook for hotplug or pcmcia-cs.
# It determines if the specified iface has to be
# processed, then performs necessary pre-configuration
# and lets ifup-common do the rest.

usage()
{
	echo "Usage: $0 <device>"
	exit 1
}

# Look if iface name will change after ifrename call.
# Then load correct options. If hotplug/pcmcia is not
# allowed for the interface, just return. Otherwise
# rename the interface and run common iface init stuff.

[ -z "$1" ] && usage
NAME=$1
OLD_NAME=$NAME
CALLER=${2:?$0: missing 2nd arg}

case "$CALLER" in
	pcmcia_cs|hotplug)
	;;
	*)
		print_error "invalid 2nd arg to $0: '$CALLER'"
		exit 1
	;;
esac

. /etc/init.d/functions
SCRIPTDIR=/etc/net/scripts
SourceIfNotEmpty $SCRIPTDIR/functions

# Deal with ifrename and mappings before we try to read options,
# because iface name may change.

MAPPED_NAME=`get_mapped_ifname $NAME`
if [ -n "$MAPPED_NAME" -a "$NAME" != "$MAPPED_NAME" ]; then
	NAME=$MAPPED_NAME
	echo -n '.'
fi

MYIFACEDIR=$IFACEDIR/$NAME
export IFACEDIR MYIFACEDIR SCRIPTDIR NAME

init_profile
pickup_options

is_yes "$DISABLED" && {
	echo -n 'skipped, disabled '
  exit 1
}

if [ "$CALLER" = "pcmcia_cs" ]; then
	! is_yes "$USE_PCMCIA" && {
		print_error "USE_PCMCIA is disabled for $NAME"
		exit 1
	}
fi

if [ "$CALLER" = "hotplug" ]; then
	! is_yes "$USE_HOTPLUG" && {
		print_error "USE_HOTPLUG is disabled for $NAME"
		exit 1
	}
fi

# Now we know that iface should be processed. Let's go.
[ "$NAME" != "$OLD_NAME" ] && $IFRENAME -c `profiled_filename $IFTAB` -i $OLD_NAME >/dev/null 2>&1
$SCRIPTDIR/ifup-common $NAME
