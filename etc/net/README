etcnet version 0.5.0

1. GENERAL INFORMATION

URL: http://pilot.org.ua/etcnet/
See README.ALT for ALTLinux specific information.

Supported interface types:
+ethernet (eth)
+IP tunnels (iptun)
+IPSec static tunnels (ipsectun)
+/-VLANs (vlan)
+PLIP (plip)
+bonding (bond)
+/-dummy

Supported protocols:
IPv4 (static, DHCP, IPv4LL)
IPv6 (static)

2. QUICK START
# mkdir /etc/net/ifaces/myinterface1
$ less /etc/net/ifaces/default/options
$ less /etc/net/ifaces/default/options-*
# vi /etc/net/ifaces/myinterface1/options
# vi /etc/net/ifaces/myinterface1/ipv4address
# vi /etc/net/ifaces/myinterface1/ipv4route
...
# mkdir /etc/net/ifaces/myinterface2
...
# vi /etc/hotplug/net.agent (see /etc/net/ifaces/default/options:USE_HOTPLUG)
...
# chkconfig network off
# ln -s /etc/init.d/network /etc/net/scripts/network.init
# chkconfig --add etcnet
# chkconfig etcnet on
# service network stop
# rmmod <all loaded network modules>
# service etcnet start

2A. Example configuration
eth0 with 10.0.0.1/24, default route to 10.0.0.254 and route 10.0.1.0/24 through 10.0.0.253

{
old /etc/sysconfig/network-scripts/ifcfg-eth0:
---8<---8<---
DEVICE=eth0
BOOTPROTO=static
IPADDR=10.0.0.1
NETMASK=255.255.255.0
ONBOOT=yes
---8<---8<---

old /etc/sysconfig/network:
---8<---8<---
GATEWAY=10.0.0.254
---8<---8<---

old /etc/sysconfig/static-routes:
---8<---8<---
eth0 net 10.0.1.0 netmask 255.255.255.0 gw 10.0.0.253
---8<---8<---

old /etc/modules.conf:
---8<---8<---
alias eth0 3c59x
---8<---8<---
}

{
new /etc/net/iface/<any name>/options
---8<---8<---
# only if name is not "eth[0-9]+"
TYPE=eth
MODULE=3c59x
---8<---8<---

new /etc/net/iface/<any name>/ipv4address
---8<---8<---
10.0.0.1/24
---8<---8<---

new /etc/net/iface/<any name>/ipv4route
---8<---8<---
10.0.1.0/24 via 10.0.0.253
default via 10.0.0.254
---8<---8<---
}

2B. REQUIREMENTS
ifrename (part of recent wireless-utils package) is a must for interface
name maps. NOTE: /etc/net 0.4.2 requires ifrename-28!
vlan-utils24 are required to setup VLAN interfaces.
Your kernel must have CryptoAPI patch applied to setup PSK IPSec tunnels.
When LINKDETECT is implemented, you will need ifplugstatus from
ifplugd package.
When BOOTPROTO is implemented, you will need a DHCP and (optionally)
IPv4LL client (zcip).
iproute2 is a must
See 

3.1 FILES
/etc/net/iface/default
There is no interface named 'default', this dir only stores default
configuration. Files:
options: default options for all interfaces
options-<TYPE>: default options for interfaces of type TYPE
Those scripts are executed only if [ -x ]:
ifup-pre-local: executed before interface is up, but after it exists
ifup-post-local: executed after the interface is completely up and running
ifdown-pre-local: executed before the interface is going to be shutdown
ifdown-post-local: executed after the interface is completely gone

/etc/net/ifaces/<IFACE>
This is interface-specific configuration. Files:
options: general and type-specific options
ipv4address: 1 IPv4 address per line
ipv4route: 1 IPv4 route per line
ipv6address: 1 IPv6 address per line
ipv6route: 1 IPv6 route per line
iplink: 1 ip link option per line
ipv4rule: 1 ip -4 rule option per line

/etc/net/scripts
network.init: chkconfig initscript
functions: helper functions
options: default options

/etc/net/
options: global options and defaults
ipv4rule: ip rules startup table ('ip -4 rule add' args)
sysctl.conf: sysctl startup
vlantab: VLAN mass-configuration

iftab: interface mappings table, processed each time ifup is run

3.2 Interface groups:
0/virtual: dummy, lo (tun/tuntap?)
1/realphys (real physical): ethernet, PLIP (SLIP?)
2/hostedphys (hosted physical): VLANs, bonding
3/indeplog (independent/stateless logical): IP tunnels, IPSec tunnels, eql (vtun?)
4/deplog (dependent/statefull logical): PPP (PPtP)
Each interface has its type. Several types form a group. Groups are brought up
in a fixed order to avoid broken dependencies (say, you will not want your VLAN
interface tried to be setup before its host interface ever exists).

3.3 PLIP maps
My notes for multiple PLIP interfaces.

myplip mac fc:fc:fc:fc:fc:fc
Most hosts have 1 or 0 parallel ports.
If you have more and need configured all of them, try
using different 'baseaddress 0xXXX' maps for each iface.
Also note that you will need appropriate modules.conf
entries like:
alias plip0 plip
alias plip1 plip
alias parport0 parport
alias parport1 parport
below plip parport_pc
below parport_pc parport
options parport io=0x3f8,0x3bc
I can't check if this works now.

3.4 QoS hierarchy
/etc/net/ifaces/ether/qos/
1/ --- root qdisc, 1 is handle (1:)
1/qdisc --- root qdisc options
10/   \
20/    | - root qdisc subclasses (handles are 1:10, 1:20 and 1:30 respectively)
30/   /
10/class --- class options
10/100/ --- class child qdisc options (handle 10:100)
10/100/101/   \
10/100/102/    | - subclasses (100:101, 100:102, 100:103)
10/100/103/   /
General rules:
1. Classes and qdiscs can contain each other. Typically a class contains a qdisc
or one or more subclasses. A qdisc typically contains one ore more classes.
2. Containment is represented by directory tree.
3. Directory must contain one of two files: either 'class' or 'qdisc' so that we
know the type of each node. The file contains current node parameters.
4. Qdisc handle is it's directory name with ':'.
5. Class classid is the last qdisc seen in the tree plus ':' plus current class's
directory name.
6. If current directory contains file 'extra', it's contents will be used when
creating children (usually classes). This does not apply to childrens' children.
7. Class dir can contain 'filter' file with filter statements. The filters will
belong to parent qdisc and will point to current dir (class), you don't have to
specify parent and flowid keywords. If 'extra.filter' file exists, it's contents
will be prefixed to each line of 'filter' file.

3.5. INTERFACE RECURSION AND DEPENDENCIES
1. When we bring up an iface, we MUST ensure that parent iface is up.
If it is not so, continue only if we succeeded bringing parent iface up.
2. When we have brought an iface up, we MAY (if configured to do it)
bring up all ifaces that depend on it.
3. When we bring down an iface, we MUST first bring down all dependant
ifaces.
4. We SHOULD keep track of processed ifaces for the original transaction
to avoid loops.


4. SYSTEM CONFIGURATION
4.1 Edit /etc/sysctl.conf so that it does not intersect with /etc/net/sysctl.conf

4.2 pcmcia_cs configuration (already done in ALTLinux)
Edit /etc/pcmcia/network.opts and replace calls to /sbin/ifup and 
/sbin/ifdown to '/etc/net/scripts/ifup-removable $1 pcmcia_cs' and
'/etc/net/scripts/ifdown-removable $1 pcmcia_cs' respectively.
Apply patch for interface name change support to cardmgr.

4.3 hotplug configuration (already done in ALTLinux)
Edit /etc/hotplug/net.agent and change 
/sbin/ifdown to '/etc/net/scripts/ifdown-removable $1 hotplug' and
/sbin/ifup to '/etc/net/scripts/ifup-removable $1 hotplug'.

4.4 ifplugd configuration (already done in ALTLinux)
my /etc/ifplugd/ifplugd.conf:
INTERFACES="ether"
ARGS="--wait-on-fork --no-auto --monitor --no-shutdown --ignore-retval --delay-up=0 --delay-down=2"

my /etc/ifplugd/ifplugd.action:
set -e

if [ -z "$1" ] || [ -z "$2" ] ; then
        echo "Wrong arguments" > /dev/stderr
        exit 1
fi

[ "$2" = "up" ] && IN_IFPLUGD=yes exec /etc/net/scripts/ifup-common $1
[ "$2" = "down" ] && IN_IFPLUGD=yes exec /etc/net/scripts/ifdown $1

exit 1


5. NETWORK PROFILES
A profile is a configuration superset. E.g. when a notebook boots up in
several different networks, it's desirable to select current configuration
by just one parameter. Current profile name can be set via:
 1. environment variable PROFILE (not a good idea I guess)
 2. file /etc/net/profile (file should contain just one word, e.g. "office" w/o quotes)
 3. kernel boot parameter "netprof", e.g. "LILO: linux netprof=home"
Specifying a profile does nothing by default. But if etcnet scripts know the
current profile name (e.g. "home") and look for a configuration file (e.g. "options"
and "options.home" exists, then "options.home" will be used instead of "options".
The same for ipv4address, ipv4route, ipv4rule, ipv6address, iplink and so on).

Now if you want to boot the same host in two different networks, you will most
probably have to create additional ipv4address.yourprofilename for another address
and ipv4route.yourprofilename for another default route. Same for resolv.conf,
I guess.

Next example: booting two different hosts from the same HDD (root fs). The same as
previous, but additional options.yourprofilename and iftab.yourprofilename for the
different network card.

To switch between configurations without editing /etc/net/profile one can use:
# service etcnet startwith office
# service etcnet restartwith home

6. TODO
-ppp hooks and /etc/ppp/ip-up*
-control
-default prefixes for sysctl.conf files
-handle 'add' in ipv4rule on ifdown
-analyze zebra and RTPROTO ip option
-handle network mounts?
-check exit codes
+interface dependencies support
-implement -r flag to ifup, handle vlantab
-IrLAN support?
-wireless host AP support?
+QoS infrastructure
-IPSec (openswan) support?
+assume ONBOOT=no for removables
-Elektra support
+zcip -> ipv4ll
-extend start_vlantab ans stop_vlantab for iface deps
-make /sbin/ifup and /sbin/ifdown symlinks, not files

7. CHANGELOG

0.5.0:
	initial QoS framework
	initial recursion and dependencies processing framework
	logger, DHCP, etcnet.init argc fixes
	changed ZCIP to IPv4LL
	renamed etcnet.init to network.init, introduced sysconfig/network to ease migration
0.4.2:
	documentation updates
	synced with most recent beta of wireless-utils
	disabled IPv6 by default
	enabled etcnet service by default
	fixed bug with missing iftab
	fixed bug with vlantab and UP flag
0.4.1: ifrename call fix, did some ALTLinux integration
0.4.0: DHCP/ZCIP/LINKDETECT/ifplugd support
0.3.0: network profiles framework (see section 5)
0.2.2: experimental wireless support, some fixes
0.2.1: PCMCIA now works (see above)
0.2.0:
	ip rule support
	experimental hotplug support (no time to check, but should work)
	RC: 2 for hard error, 1 for soft error
0.1.1: more docs
0.1.0: 1st public release
